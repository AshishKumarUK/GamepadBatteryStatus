name: Build DualSense Battery Plugin

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET SDKs
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          6.0.x
    
    - name: Install .NET Framework 4.6.2 Developer Pack
      run: choco install netfx-4.6.2-devpack -y
    
    - name: List Project Files
      shell: pwsh
      run: |
        Write-Host "Project structure:"
        Get-ChildItem -Recurse -Name | Where-Object { $_ -notlike "*\.git\*" } | Sort-Object
    
    - name: Build Helper (framework-dependent, net8.0)
      run: dotnet build Helper -c Release --verbosity normal
      continue-on-error: false
    
    - name: Build Plugin
      run: dotnet build Plugin -c Release --verbosity normal
      continue-on-error: false
    
    - name: Verify Build Output
      shell: pwsh
      run: |
        Write-Host "Checking build outputs..."
        
        if (Test-Path "Plugin\bin\Release\net462\DualSenseBattery.dll") {
          Write-Host "✅ Plugin DLL found"
        } else {
          Write-Host "❌ Plugin DLL not found!"
          Get-ChildItem "Plugin\bin\" -Recurse -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  - $($_.FullName)" }
          exit 1
        }
        
        $helperBase = "Helper\bin\Release\net8.0\DualSenseBatteryHelper"
        $helperFiles = @(
          "$helperBase.exe",
          "$helperBase.dll",
          "$helperBase.runtimeconfig.json",
          "$helperBase.deps.json"
        )
        $missing = $false
        foreach ($f in $helperFiles) { if (-not (Test-Path $f)) { Write-Host "❌ Missing: $f"; $missing = $true } else { Write-Host "✅ Found: $f" } }
        if ($missing) { Write-Host "Helper build outputs missing required files."; exit 1 }
    
    - name: Create Plugin Package
      shell: pwsh
      run: |
        Write-Host "Creating plugin package..."
        
        # Prepare plugin directory content (expected archive root contents)
        $pluginDir = "DualSenseBattery_fbd2c2e6-9c1b-49b6-9c0d-1c5d3c0a9a6a"
        New-Item -ItemType Directory -Force -Path "$pluginDir\Helper" | Out-Null
        
        # Copy plugin files
        Copy-Item "Plugin\bin\Release\net462\DualSenseBattery.dll" "$pluginDir\"
        Copy-Item "Plugin\extension.yaml" "$pluginDir\"
        
        # Copy helper files (framework-dependent minimal set for net8.0)
        Copy-Item "Helper\bin\Release\net8.0\DualSenseBatteryHelper.exe" "$pluginDir\Helper\"
        Copy-Item "Helper\bin\Release\net8.0\DualSenseBatteryHelper.dll" "$pluginDir\Helper\"
        Copy-Item "Helper\bin\Release\net8.0\DualSenseBatteryHelper.runtimeconfig.json" "$pluginDir\Helper\"
        Copy-Item "Helper\bin\Release\net8.0\DualSenseBatteryHelper.deps.json" "$pluginDir\Helper\"
        
        # Verify package contents (pre-zip)
        Write-Host "Package contents (pre-zip):"
        Get-ChildItem "$pluginDir\" -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" }
        
        # Create .pext file with flat root contents
        Write-Host "Creating .pext file with flat root contents..."
        if (Test-Path "DualSenseBattery.pext") { Remove-Item "DualSenseBattery.pext" -Force }
        Compress-Archive -Path "$pluginDir\*" -DestinationPath "DualSenseBattery.pext" -Force
        
        Write-Host "✅ Plugin package created successfully"
        Write-Host "Package size: $((Get-Item 'DualSenseBattery.pext').Length) bytes"
        
        # Inspect zip root to confirm no extra folder
        Write-Host "Testing zip contents (should show extension.yaml at ROOT):"
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        $zip = [System.IO.Compression.ZipFile]::OpenRead("DualSenseBattery.pext")
        $zip.Entries | ForEach-Object { Write-Host "  - $($_.FullName)" }
        $zip.Dispose()
    
    - name: Upload Plugin Artifact
      uses: actions/upload-artifact@v4
      with:
        name: DualSenseBattery
        path: DualSenseBattery.pext
